// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  ownedProjects Project[]    @relation("ProjectOwner")
  memberships   Membership[]
  assignedTasks Task[]       @relation("TaskAssignee")

  @@map("users")
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String
  createdAt   DateTime @default(now())
  ownerId     String

  // Relations
  owner       User         @relation("ProjectOwner", fields: [ownerId], references: [id])
  memberships Membership[]
  tasks       Task[]

  @@map("projects")
}

model Membership {
  id        String @id @default(cuid())
  userId    String
  projectId String
  role      Role   @default(VIEWER)

  // Relations
  user    User    @relation(fields: [userId], references: [id])
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  @@unique([userId, projectId])
  @@map("memberships")
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String
  status      TaskStatus @default(TODO)
  projectId   String
  assignedToId String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignedTo User?   @relation("TaskAssignee", fields: [assignedToId], references: [id])

  @@map("tasks")
}

enum Role {
  OWNER
  CONTRIBUTOR
  VIEWER
}

enum TaskStatus {
  TODO
  DOING
  DONE
}